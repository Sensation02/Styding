using System;


namespace Attribute__Reflection
{
    [AttributeUsage(AttributeTargets.All, AllowMultiple = false)] 
    // атрибут для атрибута який обмежує вживання атрибута
    // All - для всього, що виставляється завмовчанням
    // через знак |  (лог.опер. АБО) можна задавати декілька таргетів

    // створили доприкладу атрибут геолокації
    internal class GeoAttribute : Attribute // треба успадкуватися
    {
        // вказуємо додаткові поля які хочемо отримати чи зберегти по нашому фото
        // якісь координати де було відзнято фото:
        // (до речі, тільки в такому випадку підходять однобуквенні назви проперті)
        public int X { get; set; }
        public int Y { get; set; }

        // конструктор без параметів (частіше всього), щоб можна було задавати ці параметри:
        public GeoAttribute() { }

        // якщо ми об"явимо атрибут без конструктора ми зможемо створювати атрибут без параметрів
        // основна особливість яка є для роботи з атрибутами є рефлексія
        // рефлексія - це можливість працювати через код атрибута з кодом
        // можемо отримати імена, набори параметрів метода, можемо імена властивостей, отримати їх значення
        // тобто працюємо небезпосередньо з даними, а ніби з обоготкою який описує клас

        public GeoAttribute(int x, int y)
        {
            // перевіряємо вхідні дані

            X = x; Y = y; 
        }

        public override string ToString()
        {
            return $"Координати нашого фото: [{X}; {Y}]";
        }
    }
}
