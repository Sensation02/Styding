using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
/*
 
Небезпечний код - це такий код який не є якимось "небезпечним" і не таким яким не можна користуватися.

Таким кодом можна користуватися але це треба робити обдумано. Для цього зробили певне обмеження, програма має
збиратися з певним ключем, що пишеться в програмі, або якщо це віжуал студіо - ставиться певний дозвіл на проекті
і помічаються вказівниками класи, структури, методи так інші ділянки з таким кодом.

Як це працює?
Пам"ять це певний "ящик" який складається з 0 та 1. В кожному ящику є певний адрес, унікальне число, за яким можна
щось закріпити. Коли визначається перемінна з якимось типом, береться певне ім"я, це все закріплюється за певним
адресом. Ім"я цієї перемінної має вказівник. Звертаючись до вказівника ми звертаємося до адресу цієї пам"яті і
маємо можливість щось із ним зробити. В цьому і виявляється небезпечність, бо можемо зайти не туди і щось наробити
поганого. 
Працювати з цим так само які працюємо з ref(референс), тільки референс це безпечно,
а працювати з адресом пам"яті ні. Вказівники добре працюють тоді коли треба зв"язати програму яка написана на
декількох мовах програмування.

*/
namespace Unsafe_code
{
    internal class Program
    {
        static void Main(string[] args)
        {
            unsafe // ділянка небезпечного кода 
            {
                int i = 30;

                // далі спобуємо отримати ссилку на даний об"єкт методом об"яви вказівника:
                int* address = &i;
                // таке звертання називається "розіменування"

                // при чому int це 32-бітна система
                // 64-бітна це long 

                Console.WriteLine(*address);
                // через * звертаємося до вказівника і тут також операція "розіменування"
                // щоб звернутися до нашого адреса треба привести до стандартного типу, а в нас 64-бітна система
                Console.WriteLine((long)address);
                // при чому після кожно запуска різний адрес

                int a = 5;
                int b = 6;
                Calc(a, &b);
                Console.WriteLine(a); // 5
                Console.WriteLine(b); // 700 - тому що за цим адресом є це значення, іншого там не може бути

                // а можна перейти на іншу ділянку пам"яті, як з цим працювати? - коротко, так, можна

                int* address2 = address + 4;
                *address2 = 777;
                Console.WriteLine(*address2);
                // це робити небезпечно, а в чому основна небезпека?
                // в тому що ми звертаємося якогось ящику в якому вже можуть бути
                // якась перемінна, якісь дані в іншому класі, методі, просто так вийшло що вони лежать поруч

                // вказівник на вказівник:
                int** adr = &address;
                // по суті ще одна перемінна в яку поклали адрес адреса перемінної)
                Console.WriteLine((long)adr); // адрес вказівника, наприклад - 9695684
                Console.WriteLine((long)*adr); // адрес перемінної - 9695688
                Console.WriteLine(**adr); // значення перемінної - 30
            }



            Console.ReadLine();
        }

        static unsafe void Calc(int i, int* j) // небезпечний метод який приймає ссилку на перемінну
        {
            i = 500;
            *j = 700;
        }

        static void Clac2(int i, ref int j) // те саме що і метод вище, тільки безпечно
        {
            i = 500;
            j = 700;
        }
    }
}
