namespace Ссилочні_та_значимі_типи
{
    /*
            ВАЖЛИВА тема для .NET розробника та для співбесіди!!!

            Ссилочні {reference types} та значимі {value types} типи

            Стек потока {stack} і керована куча {heap} (області оперативної пам"яті (мало і багато))

            Стек - це невелика кількість пам"яті яка виділяється дла потока (по дефолту 1 Мб)
        він використовується для зберігання інформації перемінних, для виконання операцій а також
        для виклику методів які працюють в нашій програмі. Така пам"ять працює швидко,
        звільняється швидко коли не треба. Працює по принципу Last In, Last Out тобто, що останнім
        попало в пам"ять буде останнім вивільнятися, але про це пізніше.

            Куча - це ніби склад оперативної пам"яті який ми можемо використовувати по мірі потреби
        і об"єм пам"яті буває різним в залежності від платформи (ОС) на які ми запускаємо нашу програму
        для 32-розрядної системи до 1.5 Гб, для 64-х - до 8 Тб.
        Вже таку пам"ять важче викликати і важче звільнити. Звільненням такої пам"яті займається збирач
        сміття (в С++, наприклад, цим займається власне розробник).

            ЗНАЧИМІ типи:
        Де розміщуються?            розміщуються в Стекі;
        Як відрізнити?              це типи даних Struct і Enum, неявно успадковані від System.ValueType;
        Коли перемінні цього типу   Коли покидають контекст, в якому вони були визначеня;
        перестають існувати?
        Поведінка при передачі      Перемінні передаються по значенню (копіюються реальні дані).
        даних і копіюванні

            ССИЛОЧНІ типи:
        Де розміщуються?            розміщуються в Стекі;
        Як відрізнити?              це Class - може бути похідним від будь якого іншого типу
                                    (крім System.ValueType, якщо тільки цей тип не запакований)
        Коли перемінні цього типу   Коли об"єкт підвержений збірці сміття
        перестають існувати?
        Поведінка при передачі      Копіюється ссилка, оригінал і копія посилаються на один і той же
        даних і копіюванні          об"єкт в керованій кучі, одні і ті ж дані
    */

    internal class leson
    {
        private static void Main(string[] args)
        {
            int a = 5; //при наведенні на Інт випливає що це struct - значимі типи, розмістили в Стекі
            System.Int32 b = 5; //те ж що і вище

            Random r = new Random(); //це вже Ссилочний тип, розміщується в Кучі

            int[] array = new int[a]; //Інт це стуктура, але всі масиви це ссилочні типи

            ConsoleKey; // - Enum - значимий тип, в стекі

            { //це є ссилка на якусь частину пам"яті
                int c = 10; //тут виділяється пам"ять
            } //тут звільняється, тобто пррацює по області видимості

            { //аналогічно тут
                int[] array1 = new int[a]; //тільки пам"ять в Кучі
            } //тут пам"ять не одразу звільняється, а ще деякий час там буде зберігатися
            //а якщо і звільниться то одразу завершиться виконання програми (масиву)

            int d;
            d = a; //тут ми ніби виділяємо пам"ять на ще одну перемінну і в цій пам"яті
            //..вже є дві перемінні які мають по значенню "5" (копіюються)

            int[] array2 = new int[a];
            //int [] array2 - Stack - як ярлик на роб. столі
            //new int [a] - Heap - тобто реальні дані масиву (або ніби програму по прикладу ярлика)

            array = array2;
            //ці ссилки (або ярлики) буду посилатися на одні й ті ж дані
        }
    }
}