/*
    Клієнт-серверна взаємодія - 
    це всі наші сайти, браузери і результат нашої взаємодії. Сервер це як звичайний комп в який заходять дані 
    і він працює по принципу очікування. Якщо конкретніше то це застосунок що працює на цьому компі (сервері)
    коли поступає якийсь сигнал, він його обробляє і якщо він сигнал коректний то видає якийсь результат,
    і якщо він некоректний то видає якусь помилку.
    Клієнтський застосунок це те чим користується людина, тобто програма яка звертається, дає запрос на сервер.
    Наш браузер це є прикладом нашої клієнтської програми, який дає запрос в базу за якийсь сайт і отримує
    результатом сторінку сайта. 
    
    TCP і UDP - найбільш поширені протоколи взаємодії між клієнтом та сервером. 
    
    TCP - встановлює чітку взаємодію між клаєнтом та сервером і забезпечує гарантію відповіді зі сторони сервера, 
    він буде відправляти запрос допоки клієнт не отримає відповідь, або буде перевищена кількість запросів.
    Його мінус в тому, що він повільніший і бере багато ресурсів.

    UDP - не гарантує доставку відповіді, але він швидкий і легкий. Віщає широко, коли треба оповістити велику
    кількість клієнтів.

    TCP - це про роботу сайтів, або спілкуванні один на один, якщо це пробиться розумно то за допомоги асинхронності
    UDP - про стрімінг на тому є Ютубі чи ще десь, тобто відеопоток

    Для TCP треба встановити чіткий адрес в сєті і порт
 */
using System.Net;
using System.Net.Sockets;
using System.Text;
namespace Sockets
{
    class ServerTCP
    {
        static void Main(string[] args)
        {

            #region TCP Server
            const string ip = "127.0.0.1";
            const int port = 8080;

            //ендпоінт - те місце куди можна підкючатися. в одного сервера можуть бути декілька видів ендпоінтів
            //тобто точка підключення.
            var tcpEndPoint = new IPEndPoint(IPAddress.Parse(ip), port);

            //сокет - ніби двері в які можна зайти, через які відбувається з"єднання 
            var tcpSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            //набір параметрів сокета: 
            // 1: ip адреса 4-ї версії
            // 2: потокова передача даних для протокола TCP (програма сама нам підказує)
            // 3: конкретно вказуємо що це TCP протокол

            //зв"язуємо наш сокет, тобто переводимо в режим очікування,
            //тоообто наш сокет слухає конкретно цей порт
            tcpSocket.Bind(tcpEndPoint);
            tcpSocket.Listen(5);
            //в черзі на запрос під номером 5, тобто ми очкуємо поки провзаємодіють перші 4 клієнтів із сервером

            //створюємо процес прослуховування, який має бути безкінечним
            while (true)
            {
                //сам прослуховувач:
                var listener = tcpSocket.Accept();
                //ніби ще один сокет який буде слухати конкретного клієнта, тобто він створюється окремо
                //під кожного клієнта, після взаємодії з яким він знищується

                //буфер, куди будемо приймати наші запроси
                var buffer = new byte[256];
                //таке собі сховище даних

                //кількість реально отриманих запросів
                var size = 0;

                //наш білдер:
                var data = new StringBuilder();

                //отриуємо наші запроси:
                do
                {
                    size = listener.Receive(buffer);
                    //отримаємо наші 256 байтів, але їх може бути інша кількість, для цього нам і потрібен size
                    //в size запишеться реальна кількість байтів із нашого запроса і після цього треба зберегти:

                    data.Append(Encoding.UTF8.GetString(buffer, 0, size));
                    //дані поступають в кодованому виді, тому треба їх розкодувати:
                    //Encoding.UTF8.GetString(buffer, 0, size)
                    //воно по суті буде брати 256 символів і зберігати, якщо є більше 256 - буде повторювати

                } while (listener.Available > 0);

                Console.WriteLine(data); // TODO: перевірити .ToString

                //даємо зворотню відповідь: (яку треба закодувати)
                listener.Send(Encoding.UTF8.GetBytes("Успіх"));
                //закримаємо з"єднання: (з обох сторін - і в клієнта, і у сервера)
                listener.Shutdown(SocketShutdown.Both);
                //виключаємо:
                listener.Close();
            }
            #endregion

            #region UDP Server
            //ip та port
            const string ip2 = "127.0.0.1";
            const int port2 = 8081;

            //ендпойнт та сокет
            var udpServerEndPoint = new IPEndPoint(IPAddress.Parse(ip2), port2);
            //відповідно тут міняємо:
            var udpSocket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);

            //підключення:
            udpSocket.Bind(udpServerEndPoint);

            //прослуховування:
            while (true)
            {
                var buffer2 = new byte[256];
                var size2 = 0;
                var data2 = new StringBuilder();

                
                //ще один ендпойнт
                EndPoint senderEndPoint = new IPEndPoint(IPAddress.Any, 0);
                //цей ендпойнт створений тому що в нас немає під"єднання типу точка-точка, він повинн приймати
                //будь який ір адрес, тобто сюди буде збережений адрес клієнта

                do
                {
                    size2 = udpSocket.ReceiveFrom(buffer2, ref senderEndPoint);
                    data2.Append(Encoding.UTF8.GetString(buffer2));
                } while (udpSocket.Available > 0);

                udpSocket.Shutdown(SocketShutdown.Both);
                udpSocket.Close();

                //вивід повідомлення:
                Console.WriteLine(data2);

                //кодуємо відповідь
                udpSocket.SendTo(Encoding.UTF8.GetBytes("Succes"), senderEndPoint);



            }

            // TODО: закриття сокета
            #endregion
        }
    }
}